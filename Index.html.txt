{
  "fontStyle" : "Default",
  "text" : "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" \/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" \/>\n<title>Block Blast â€“ Single File<\/title>\n<style>\n  :root{\n    --bg:#0f1530;\n    --panel:#141b3d;\n    --accent:#ffd04d;\n    --cell-empty:#1c2656;\n    --cell:#2f6df6;\n    --cell2:#35c759;\n    --cell3:#ef4444;\n    --cell4:#f59e0b;\n    --hint-ok:#22c55e90;\n    --hint-bad:#ef444490;\n    --grid-gap:4px;\n    --cell-size:clamp(26px, 7.8vw, 44px);\n  }\n  *{box-sizing:border-box; -webkit-tap-highlight-color: transparent;}\n  html,body{height:100%;}\n  body{\n    margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial;\n    background: radial-gradient(1200px 800px at 70% -10%, #1b2360 0%, #0f1530 55%, #0b0f24 100%) fixed;\n    color:#fff; display:flex; align-items:center; justify-content:center;\n  }\n  .app{ width:min(100vw, 520px); padding:14px;}\n  .header{display:flex; justify-content:space-between; align-items:center; margin-bottom:10px;}\n  .score{\n    background:var(--panel); padding:10px 14px; border-radius:12px; font-weight:700;\n    letter-spacing:.3px; box-shadow: inset 0 0 0 1px #ffffff10;\n  }\n  .btn{\n    appearance:none; border:0; padding:10px 14px; border-radius:12px; font-weight:700; cursor:pointer;\n    color:#0b0f24; background:var(--accent); box-shadow:0 6px 18px #00000040;\n  }\n\n  .board{\n    position:relative; background:linear-gradient(180deg,#0f1740,#0b1130);\n    border-radius:16px; padding:10px; box-shadow: inset 0 0 0 1px #ffffff10, 0 20px 50px #00000040;\n  }\n  .grid{\n    display:grid; grid-template-columns:repeat(10, var(--cell-size));\n    grid-template-rows:repeat(10, var(--cell-size));\n    gap:var(--grid-gap);\n    touch-action:none;\n  }\n  .cell{\n    width:var(--cell-size); height:var(--cell-size);\n    border-radius:6px;\n    background:var(--cell-empty);\n    box-shadow: inset 0 -3px 0 0 #00000040;\n  }\n  .cell.filled{ background:linear-gradient(180deg,#5fa0ff,#2f6df6); }\n  .cell.c2{ background:linear-gradient(180deg,#6ae08a,#35c759); }\n  .cell.c3{ background:linear-gradient(180deg,#ff7b7b,#ef4444); }\n  .cell.c4{ background:linear-gradient(180deg,#ffd27a,#f59e0b); }\n\n  .hint-ok{ outline:3px solid var(--hint-ok); }\n  .hint-bad{ outline:3px solid var(--hint-bad); }\n\n  .tray{\n    display:flex; gap:10px; margin-top:12px; align-items:center; justify-content:center; min-height:calc(var(--cell-size)*3 + 16px);\n  }\n  .piece{\n    display:grid; gap:var(--grid-gap);\n    touch-action:none; user-select:none; cursor:grab;\n  }\n  .piece .pcell{\n    width:var(--cell-size); height:var(--cell-size); border-radius:6px;\n    background:linear-gradient(180deg,#ffd27a,#f59e0b);\n    box-shadow: inset 0 -3px 0 0 #00000040;\n  }\n  .piece.c2 .pcell{ background:linear-gradient(180deg,#6ae08a,#35c759); }\n  .piece.c3 .pcell{ background:linear-gradient(180deg,#ff7b7b,#ef4444); }\n  .piece.c4 .pcell{ background:linear-gradient(180deg,#5fa0ff,#2f6df6); }\n\n  \/* Drag clone that follows the finger *\/\n  .dragging{\n    position:fixed; left:0; top:0; pointer-events:none; transform:translate(-9999px,-9999px) scale(1);\n    z-index:20; filter:drop-shadow(0 10px 24px #0008);\n  }\n\n  .overlay{\n    position:fixed; inset:0; display:flex; align-items:center; justify-content:center;\n    background:#0b0f24e6; backdrop-filter: blur(6px); -webkit-backdrop-filter: blur(6px);\n  }\n  .card{\n    width:min(92vw, 440px); background:var(--panel); border-radius:18px; padding:22px;\n    text-align:center; box-shadow: 0 30px 60px #0008, inset 0 0 0 1px #ffffff12;\n  }\n  .title{font-size:28px; font-weight:800; letter-spacing:.2px; margin:4px 0 14px;}\n  .sub{opacity:.8; margin-bottom:18px;}\n  .small{font-size:12px; opacity:.7;}\n  .row{display:flex; gap:10px; justify-content:center; flex-wrap:wrap;}\n<\/style>\n<\/head>\n<body>\n  <div class=\"app\">\n    <div class=\"header\">\n      <div class=\"score\">Score: <span id=\"scoreVal\">0<\/span><\/div>\n      <button class=\"btn\" id=\"restartBtn\" aria-label=\"Restart\" title=\"Restart\">Restart<\/button>\n    <\/div>\n\n    <div class=\"board\">\n      <div class=\"grid\" id=\"grid\" aria-label=\"Game board\"><\/div>\n    <\/div>\n\n    <div class=\"tray\" id=\"tray\" aria-label=\"Next pieces\"><\/div>\n  <\/div>\n\n  <!-- Start\/Game Over Overlay -->\n  <div class=\"overlay\" id=\"overlay\">\n    <div class=\"card\">\n      <div class=\"title\">Block Blast<\/div>\n      <div class=\"sub\">Fill rows & columns by placing the pieces. No timer, just vibes.<\/div>\n      <div class=\"row\" style=\"margin-bottom:14px\">\n        <button class=\"btn\" id=\"startBtn\">Start Game<\/button>\n      <\/div>\n      <div class=\"small\">Drag pieces onto the board. Clear full lines to score. When none of the 3 fit, game over.<\/div>\n    <\/div>\n  <\/div>\n\n<script>\n(() => {\n  const W = 10, H = 10;\n  const gridEl = document.getElementById('grid');\n  const trayEl = document.getElementById('tray');\n  const scoreEl = document.getElementById('scoreVal');\n  const overlay = document.getElementById('overlay');\n  const startBtn = document.getElementById('startBtn');\n  const restartBtn = document.getElementById('restartBtn');\n\n  \/\/ Build board cells\n  const board = Array.from({length:H}, () => Array(W).fill(0)); \/\/ 0 empty, >0 color id\n  const cellEls = [];\n  for (let y=0;y<H;y++){\n    for(let x=0;x<W;x++){\n      const c = document.createElement('div');\n      c.className = 'cell';\n      c.dataset.x = x; c.dataset.y = y;\n      gridEl.appendChild(c);\n      cellEls.push(c);\n    }\n  }\n  const idx = (x,y)=> y*W + x;\n\n  \/\/ Piece definitions (matrix of 0\/1). Each has color id 1..4 rotated among pieces.\n  const SHAPES = [\n    [[1]],                          \/\/ 1\n    [[1,1]],                        \/\/ 2\n    [[1,1,1]],                      \/\/ 3\n    [[1],[1],[1]],                  \/\/ 1x3 vertical\n    [[1,1],[1,0]],                  \/\/ L\n    [[1,1],[0,1]],                  \/\/ J\n    [[1,1],[1,1]],                  \/\/ square\n    [[1,1,1,1]],                    \/\/ 4\n    [[1],[1],[1],[1]],              \/\/ 1x4\n    [[1,1,1],[0,1,0]],              \/\/ T\n    [[1,1,0],[0,1,1]],              \/\/ S\n    [[0,1,1],[1,1,0]],              \/\/ Z\n    [[1,1,1],[1,0,0]],              \/\/ L big\n    [[1,1,1],[0,0,1]],              \/\/ J big\n    [[1,1,1],[0,1,0],[0,1,0]],      \/\/ T tall\n    [[1,1,1],[1,0,1]],              \/\/ U shape\n  ];\n\n  let score = 0;\n  let bag = [];          \/\/ upcoming pieces (we'll draw 3)\n  let currentSet = [];   \/\/ DOM + data for the three pieces\n  let dragging = null;   \/\/ {el, shape, color, w,h, offset, ghost}\n  let gameOver = false;\n\n  function reset(){\n    for(let y=0;y<H;y++){ for(let x=0;x<W;x++){ board[y][x]=0; renderCell(x,y); } }\n    score = 0; scoreEl.textContent = score;\n    gameOver = false;\n    trayEl.innerHTML = '';\n    bag = [];\n    refillPieces();\n  }\n\n  function renderCell(x,y){\n    const el = cellEls[idx(x,y)];\n    el.className = 'cell';\n    const v = board[y][x];\n    if (v){\n      el.classList.add('filled');\n      if (v===2) el.classList.add('c2');\n      if (v===3) el.classList.add('c3');\n      if (v===4) el.classList.add('c4');\n    }\n  }\n\n  function randInt(n){ return Math.floor(Math.random()*n); }\n  function randomColor(){ return 1 + randInt(4); }\n\n  function takeFromBag(){\n    if (bag.length<3){\n      \/\/ refill bag with shuffled shapes\n      const pool = [...SHAPES];\n      for(let i=pool.length-1;i>0;i--){\n        const j = Math.floor(Math.random()*(i+1)); [pool[i],pool[j]]=[pool[j],pool[i]];\n      }\n      bag.push(...pool);\n    }\n    return bag.shift();\n  }\n\n  function clearHints(){\n    cellEls.forEach(c=>c.classList.remove('hint-ok','hint-bad'));\n  }\n\n  function spawnPiece(shape, color){\n    \/\/ create DOM\n    const h = shape.length, w = shape[0].length;\n    const el = document.createElement('div');\n    el.className = `piece c${color}`;\n    el.style.gridTemplateColumns = `repeat(${w}, var(--cell-size))`;\n    el.style.gridTemplateRows = `repeat(${h}, var(--cell-size))`;\n    for (let r=0;r<h;r++){\n      for (let c=0;c<w;c++){\n        const v = shape[r][c];\n        const cell = document.createElement('div');\n        cell.className = 'pcell';\n        cell.style.visibility = v? 'visible':'hidden';\n        el.appendChild(cell);\n      }\n    }\n    el.dataset.w = w; el.dataset.h = h;\n    trayEl.appendChild(el);\n    attachDragHandlers(el, shape, color);\n    return el;\n  }\n\n  function refillPieces(){\n    currentSet = [];\n    trayEl.innerHTML = '';\n    for(let i=0;i<3;i++){\n      const shape = takeFromBag();\n      const color = randomColor();\n      const el = spawnPiece(shape, color);\n      currentSet.push({el, shape, color});\n    }\n  }\n\n  function canPlace(shape, gx, gy){\n    const h = shape.length, w = shape[0].length;\n    for(let r=0;r<h;r++){\n      for(let c=0;c<w;c++){\n        if (!shape[r][c]) continue;\n        const x = gx + c, y = gy + r;\n        if (x<0 || y<0 || x>=W || y>=H) return false;\n        if (board[y][x]!==0) return false;\n      }\n    }\n    return true;\n  }\n\n  function place(shape, gx, gy, color){\n    const h = shape.length, w = shape[0].length;\n    let placed = 0;\n    for(let r=0;r<h;r++){\n      for(let c=0;c<w;c++){\n        if (!shape[r][c]) continue;\n        board[gy+r][gx+c] = color;\n        renderCell(gx+c, gy+r);\n        placed++;\n      }\n    }\n    score += placed;\n    \/\/ Check full rows\/cols\n    const fullRows = [], fullCols = [];\n    for(let y=0;y<H;y++){\n      if (board[y].every(v=>v!==0)) fullRows.push(y);\n    }\n    for(let x=0;x<W;x++){\n      let ok=true; for(let y=0;y<H;y++){ if(board[y][x]===0){ok=false;break;} }\n      if (ok) fullCols.push(x);\n    }\n    const linesCleared = fullRows.length + fullCols.length;\n    if (linesCleared){\n      \/\/ clear with little delay effect\n      fullRows.forEach(y=>{ for(let x=0;x<W;x++){ board[y][x]=0; renderCell(x,y);} });\n      fullCols.forEach(x=>{ for(let y=0;y<H;y++){ board[y][x]=0; renderCell(x,y);} });\n      \/\/ scoring bonus\n      score += linesCleared * 10;\n    }\n    scoreEl.textContent = score;\n  }\n\n  function boardMetrics(){\n    const rect = gridEl.getBoundingClientRect();\n    const style = getComputedStyle(gridEl);\n    const gap = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--grid-gap')) || 4;\n    const cell = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--cell-size'));\n    return {rect, gap, cell};\n  }\n\n  function highlight(shape, gx, gy, ok){\n    clearHints();\n    const h = shape.length, w = shape[0].length;\n    for(let r=0;r<h;r++){\n      for(let c=0;c<w;c++){\n        if (!shape[r][c]) continue;\n        const x = gx + c, y = gy + r;\n        if (x<0 || y<0 || x>=W || y>=H) continue;\n        const el = cellEls[idx(x,y)];\n        el.classList.add(ok?'hint-ok':'hint-bad');\n      }\n    }\n  }\n\n  function anyMovesLeft(){\n    \/\/ check if any of the current 3 pieces fit anywhere\n    for (const p of currentSet){\n      if (!p || !p.el || p.el.parentElement!==trayEl) continue; \/\/ already used\n      const shape = p.shape;\n      for(let y=0;y<H;y++){\n        for(let x=0;x<W;x++){\n          if (canPlace(shape,x,y)) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function endIfNoMoves(){\n    if (!anyMovesLeft()){\n      gameOver = true;\n      overlay.querySelector('.title').textContent = 'Game Over';\n      overlay.querySelector('.sub').textContent = `Final score: ${score}`;\n      overlay.style.display = 'flex';\n    }\n  }\n\n  function attachDragHandlers(el, shape, color){\n    const start = (clientX, clientY) => {\n      if (gameOver) return;\n      const clone = el.cloneNode(true);\n      clone.classList.add('dragging', `c${color}`);\n      document.body.appendChild(clone);\n      dragging = {el, shape, color, ghost:clone};\n      move(clientX, clientY);\n    };\n\n    const move = (clientX, clientY) => {\n      if (!dragging) return;\n      const {ghost, shape} = dragging;\n      ghost.style.transform = `translate(${clientX - ghost.offsetWidth\/2}px, ${clientY - ghost.offsetHeight\/2}px)`;\n      const {rect, gap, cell} = boardMetrics();\n      const inside = clientX>=rect.left && clientX<=rect.right && clientY>=rect.top && clientY<=rect.bottom;\n      if (!inside){ clearHints(); return; }\n      \/\/ compute snap position\n      const gx = Math.round((clientX - rect.left - cell\/2) \/ (cell + gap));\n      const gy = Math.round((clientY - rect.top  - cell\/2) \/ (cell + gap));\n      const ok = canPlace(shape, gx, gy);\n      highlight(shape, gx, gy, ok);\n      dragging.snap = {gx, gy, ok};\n    };\n\n    const end = () => {\n      if (!dragging) return;\n      const {shape, color, ghost, snap} = dragging;\n      ghost.remove();\n      clearHints();\n      if (snap && snap.ok){\n        place(shape, snap.gx, snap.gy, color);\n        \/\/ remove piece from tray\n        el.remove();\n        \/\/ if tray empty -> refill\n        if (trayEl.children.length===0){\n          refillPieces();\n        }\n        endIfNoMoves();\n      }\n      dragging = null;\n    };\n\n    \/\/ Mouse\n    el.addEventListener('mousedown', e => { e.preventDefault(); start(e.clientX, e.clientY); });\n    window.addEventListener('mousemove', e => move(e.clientX, e.clientY));\n    window.addEventListener('mouseup',   () => end());\n\n    \/\/ Touch\n    el.addEventListener('touchstart', e => {\n      const t = e.changedTouches[0]; start(t.clientX, t.clientY);\n    }, {passive:true});\n    window.addEventListener('touchmove', e => {\n      const t = e.changedTouches[0]; move(t.clientX, t.clientY);\n    }, {passive:true});\n    window.addEventListener('touchend',  () => end(), {passive:true});\n    window.addEventListener('touchcancel', () => end(), {passive:true});\n  }\n\n  \/\/ Start\/Restart controls\n  function startGame(){\n    overlay.style.display = 'none';\n    overlay.querySelector('.title').textContent = 'Block Blast';\n    overlay.querySelector('.sub').textContent = 'Fill rows & columns by placing the pieces.';\n    reset();\n  }\n  startBtn.addEventListener('click', startGame);\n  restartBtn.addEventListener('click', startGame);\n\n  \/\/ Show start screen initially\n  overlay.style.display = 'flex';\n\n})();\n<\/script>\n<\/body>\n<\/html>\n",
  "fontSize" : 14,
  "isLineWrapEnabled" : false,
  "isBold" : false
}